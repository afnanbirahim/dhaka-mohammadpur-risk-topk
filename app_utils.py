# -*- coding: utf-8 -*-
"""app_utils.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JZv7whsrtWlDz-UbAflqVrtBs5U9LkYy
"""

# app_utils.py
import os, zipfile, requests, time
from pathlib import Path
import streamlit as st

DATA_DIR = Path("./data")
BUNDLE_DIR = DATA_DIR / "bundle"
MARKER = BUNDLE_DIR / ".ok"

@st.cache_resource(show_spinner=False)
def ensure_bundle(bundle_url: str) -> str:
    """
    Ensure the model/data bundle exists under ./data/bundle.
    If missing, download and extract a zip from bundle_url (provided in secrets).
    Returns the absolute path to the bundle directory.
    """
    BUNDLE_DIR.mkdir(parents=True, exist_ok=True)
    if MARKER.exists():
        return str(BUNDLE_DIR.resolve())

    if not bundle_url:
        raise RuntimeError("No BUNDLE_URL provided. Set it in Streamlit secrets.")

    tmp_zip = DATA_DIR / "bundle.zip"
    tmp_zip.parent.mkdir(parents=True, exist_ok=True)

    with st.status("Downloading bundle…", expanded=False) as status:
        # stream download
        with requests.get(bundle_url, stream=True, timeout=60) as r:
            r.raise_for_status()
            total = int(r.headers.get("content-length", 0))
            dl = 0
            chunk = 1024 * 1024
            with open(tmp_zip, "wb") as f:
                for part in r.iter_content(chunk_size=chunk):
                    if part:
                        f.write(part)
                        dl += len(part)
                        if total:
                            st.write(f"{dl/1e6:.1f}/{total/1e6:.1f} MB")
        status.update(label="Extracting…", state="running")
        with zipfile.ZipFile(tmp_zip, "r") as z:
            z.extractall(BUNDLE_DIR)
        tmp_zip.unlink(missing_ok=True)
        MARKER.write_text("ok")
        status.update(label="Ready", state="complete")

    return str(BUNDLE_DIR.resolve())